import pygame
import sys
import random
from time import time

# --- CONFIGURATION ---
SCREEN_WIDTH = 1024
SCREEN_HEIGHT = 600
FPS = 25
REEL_COUNT = 3
SYMBOL_HEIGHT = 128
SYMBOL_WIDTH = 128  # Original image width
TARGET_WIDTH = 328  # Scaled reel width
VISIBLE_SYMBOLS = 3
VISIBLE_HEIGHT = VISIBLE_SYMBOLS * SYMBOL_HEIGHT
TOP_MARGIN = (SCREEN_HEIGHT - VISIBLE_HEIGHT) // 2
SPIN_DURATION = 2
SPIN_SPEED = 64
REEL_GAP = 20

# --- INIT ---
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("3-Reel Slot Machine")
clock = pygame.time.Clock()

# Load and slice the reel strip from assets
reel_strip = pygame.image.load("assets/reel_strip.png").convert_alpha()
SYMBOL_COUNT = reel_strip.get_height() // SYMBOL_HEIGHT

# Pre-slice and scale symbols for performance
symbol_surfaces = []
for i in range(SYMBOL_COUNT):
    rect = pygame.Rect(0, i * SYMBOL_HEIGHT, SYMBOL_WIDTH, SYMBOL_HEIGHT)
    symbol = reel_strip.subsurface(rect)
    scaled = pygame.transform.scale(symbol, (TARGET_WIDTH, SYMBOL_HEIGHT)).convert_alpha()
    symbol_surfaces.append(scaled)

# Reel state
offsets = [random.randint(0, SYMBOL_COUNT - 1) * SYMBOL_HEIGHT for _ in range(REEL_COUNT)]
spinning = [False] * REEL_COUNT
start_times = [0] * REEL_COUNT

# Calculate reel X positions
total_width = REEL_COUNT * TARGET_WIDTH + (REEL_COUNT - 1) * REEL_GAP
start_x = (SCREEN_WIDTH - total_width) // 2
reel_positions = [start_x + i * (TARGET_WIDTH + REEL_GAP) for i in range(REEL_COUNT)]

def draw_reels():
    screen.fill((0, 0, 0))

    for i in range(REEL_COUNT):
        x = reel_positions[i]
        offset = offsets[i] % (SYMBOL_COUNT * SYMBOL_HEIGHT)
        start_index = int(offset // SYMBOL_HEIGHT)
        y_shift = offset % SYMBOL_HEIGHT

        symbols_to_draw = VISIBLE_SYMBOLS + 2
        for j in range(symbols_to_draw):
            index = (start_index + j) % SYMBOL_COUNT
            y = TOP_MARGIN + ((j - 1) * SYMBOL_HEIGHT) - y_shift  # Center-adjusted
            screen.blit(symbol_surfaces[index], (x, y))

    # Mask top and bottom
    pygame.draw.rect(screen, (0, 0, 0), pygame.Rect(0, 0, SCREEN_WIDTH, TOP_MARGIN))
    pygame.draw.rect(screen, (0, 0, 0), pygame.Rect(0, TOP_MARGIN + VISIBLE_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT - (TOP_MARGIN + VISIBLE_HEIGHT)))

    # Draw highlight box over middle symbol (payline)
    for x in reel_positions:
        highlight_rect = pygame.Rect(
            x,
            TOP_MARGIN + SYMBOL_HEIGHT,
            TARGET_WIDTH,
            SYMBOL_HEIGHT
        )
        pygame.draw.rect(screen, (255, 255, 0), highlight_rect, 4)  # Yellow border

    pygame.display.flip()

def start_spin():
    draw_reels.has_drawn_idle = False
    for i in range(REEL_COUNT):
        spinning[i] = True
        start_times[i] = time() + i * 0.3  # staggered start

def update_reels():
    now = time()
    for i in range(REEL_COUNT):
        if spinning[i]:
            if now - start_times[i] >= SPIN_DURATION:
                spinning[i] = False
                # Snap to nearest symbol
                offsets[i] = ((offsets[i] + SYMBOL_HEIGHT // 2) // SYMBOL_HEIGHT) % SYMBOL_COUNT * SYMBOL_HEIGHT
            else:
                offsets[i] += SPIN_SPEED

# --- MAIN LOOP ---
draw_reels.has_drawn_idle = False
running = True
while running:
    dt = clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            start_spin()

    if any(spinning):
        update_reels()
        draw_reels()
    else:
        if not draw_reels.has_drawn_idle:
            draw_reels()
            draw_reels.has_drawn_idle = True
        else:
            clock.tick(10)

pygame.quit()
sys.exit()
