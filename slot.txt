import pygame
import random
import sys

# --- CONFIGURATION ---
STRIP_IMAGE = "assets/Ace.png"
SYMBOL_COUNT = 6
REEL_COUNT = 3
SPIN_SPEED = 150
FPS = 4

# Set resolution
SCREEN_WIDTH = 1024
SCREEN_HEIGHT = 600

# Auto-calculate symbol sizes
SYMBOL_WIDTH = SCREEN_WIDTH // REEL_COUNT  # 341
SYMBOL_HEIGHT = SCREEN_HEIGHT // 3        # 200
REEL_IMG_HEIGHT = SYMBOL_HEIGHT * SYMBOL_COUNT

SYMBOL_WEIGHTS = [1] * SYMBOL_COUNT  # Equal probability

# --- INITIALIZATION ---
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.FULLSCREEN)
pygame.display.set_caption("Slot Machine - Fullscreen")
clock = pygame.time.Clock()

# --- LOAD AND SCALE IMAGE STRIP ---
strip_img = pygame.image.load(STRIP_IMAGE)
strip_img = pygame.transform.scale(strip_img, (SYMBOL_WIDTH, REEL_IMG_HEIGHT)).convert()

# --- CUT INDIVIDUAL SYMBOLS ---
symbols = []
for i in range(SYMBOL_COUNT):
    rect = pygame.Rect(0, i * SYMBOL_HEIGHT, SYMBOL_WIDTH, SYMBOL_HEIGHT)
    symbol_img = strip_img.subsurface(rect).copy()
    symbols.append(symbol_img)

# --- REEL CLASS ---
class Reel:
    def __init__(self, x_pos):
        self.x = x_pos
        self.offset = 0
        self.spinning = False
        self.target_symbol = None
        self.final_offset = 0
        self.spin_distance = 0
        self.spin_speed = SPIN_SPEED
        self.current_distance = 0

    def start_spin(self):
        self.spinning = True
        self.offset = 0
        self.current_distance = 0
        self.target_symbol = random.choices(range(SYMBOL_COUNT), weights=SYMBOL_WEIGHTS)[0]
        full_loops = random.randint(3, 6)
        self.final_offset = self.target_symbol * SYMBOL_HEIGHT
        self.spin_distance = full_loops * SYMBOL_COUNT * SYMBOL_HEIGHT + self.final_offset

    def update(self):
        if self.spinning:
            move = min(self.spin_speed, self.spin_distance - self.current_distance)
            self.current_distance += move
            self.offset = (self.offset + move) % REEL_IMG_HEIGHT

            if self.current_distance >= self.spin_distance:
                self.spinning = False
                self.offset = self.final_offset % REEL_IMG_HEIGHT

    def draw(self, surface):
        center_idx = int(self.offset // SYMBOL_HEIGHT) % SYMBOL_COUNT
        y_offset = -(self.offset % SYMBOL_HEIGHT)

        for i in range(3):
            symbol_idx = (center_idx + i - 1) % SYMBOL_COUNT
            y = y_offset + (i * SYMBOL_HEIGHT)
            surface.blit(symbols[symbol_idx], (self.x, y))

# --- SETUP REELS ---
reels = [Reel(i * SYMBOL_WIDTH) for i in range(REEL_COUNT)]

def start_all_reels():
    for reel in reels:
        reel.start_spin()

def all_stopped():
    return all(not reel.spinning for reel in reels)

# --- MAIN LOOP ---
start_all_reels()
running = True
needs_redraw = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False  # Escape key exits fullscreen
            elif event.key == pygame.K_SPACE and all_stopped():
                start_all_reels()
                needs_redraw = True

    # Update
    spinning_now = False
    for reel in reels:
        was_spinning = reel.spinning
        reel.update()
        if reel.spinning:
            spinning_now = True
        if was_spinning != reel.spinning:
            needs_redraw = True

    # Draw
    if spinning_now or needs_redraw:
        screen.fill((255, 255, 255))
        for reel in reels:
            reel.draw(screen)
        pygame.display.flip()
        needs_redraw = spinning_now

    clock.tick(FPS)

pygame.quit()
sys.exit()






